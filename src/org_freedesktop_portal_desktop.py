"""Auto-generated DBus bindings

Generated by jeepney version 0.8.0

Object path: /org/freedesktop/portal/desktop
Bus name   : org.freedesktop.portal.Desktop
"""

from jeepney.wrappers import MessageGenerator, new_method_call


class Inhibit(MessageGenerator):
    interface = 'org.freedesktop.portal.Inhibit'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def Inhibit(self, window, flags, options):
        return new_method_call(self, 'Inhibit', 'sua{sv}',
                               (window, flags, options))

    def CreateMonitor(self, window, options):
        return new_method_call(self, 'CreateMonitor', 'sa{sv}',
                               (window, options))

    def QueryEndResponse(self, session_handle):
        return new_method_call(self, 'QueryEndResponse', 'o',
                               (session_handle,))

class Background(MessageGenerator):
    interface = 'org.freedesktop.portal.Background'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def RequestBackground(self, parent_window, options):
        return new_method_call(self, 'RequestBackground', 'sa{sv}',
                               (parent_window, options))

    def SetStatus(self, options):
        return new_method_call(self, 'SetStatus', 'a{sv}',
                               (options,))

class Location(MessageGenerator):
    interface = 'org.freedesktop.portal.Location'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def CreateSession(self, options):
        return new_method_call(self, 'CreateSession', 'a{sv}',
                               (options,))

    def Start(self, session_handle, parent_window, options):
        return new_method_call(self, 'Start', 'osa{sv}',
                               (session_handle, parent_window, options))

class Notification(MessageGenerator):
    interface = 'org.freedesktop.portal.Notification'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def AddNotification(self, id, notification):
        return new_method_call(self, 'AddNotification', 'sa{sv}',
                               (id, notification))

    def RemoveNotification(self, id):
        return new_method_call(self, 'RemoveNotification', 's',
                               (id,))

class Screenshot(MessageGenerator):
    interface = 'org.freedesktop.portal.Screenshot'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def Screenshot(self, parent_window, options):
        return new_method_call(self, 'Screenshot', 'sa{sv}',
                               (parent_window, options))

    def PickColor(self, parent_window, options):
        return new_method_call(self, 'PickColor', 'sa{sv}',
                               (parent_window, options))

class Account(MessageGenerator):
    interface = 'org.freedesktop.portal.Account'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def GetUserInformation(self, window, options):
        return new_method_call(self, 'GetUserInformation', 'sa{sv}',
                               (window, options))

class NetworkMonitor(MessageGenerator):
    interface = 'org.freedesktop.portal.NetworkMonitor'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def GetAvailable(self):
        return new_method_call(self, 'GetAvailable')

    def GetMetered(self):
        return new_method_call(self, 'GetMetered')

    def GetConnectivity(self):
        return new_method_call(self, 'GetConnectivity')

    def GetStatus(self):
        return new_method_call(self, 'GetStatus')

    def CanReach(self, hostname, port):
        return new_method_call(self, 'CanReach', 'su',
                               (hostname, port))

class Print(MessageGenerator):
    interface = 'org.freedesktop.portal.Print'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def Print(self, parent_window, title, fd, options):
        return new_method_call(self, 'Print', 'ssha{sv}',
                               (parent_window, title, fd, options))

    def PreparePrint(self, parent_window, title, settings, page_setup, options):
        return new_method_call(self, 'PreparePrint', 'ssa{sv}a{sv}a{sv}',
                               (parent_window, title, settings, page_setup, options))

class Settings(MessageGenerator):
    interface = 'org.freedesktop.portal.Settings'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def ReadAll(self, namespaces):
        return new_method_call(self, 'ReadAll', 'as',
                               (namespaces,))

    def Read(self, namespace, key):
        return new_method_call(self, 'Read', 'ss',
                               (namespace, key))

class GameMode(MessageGenerator):
    interface = 'org.freedesktop.portal.GameMode'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def QueryStatus(self, pid):
        return new_method_call(self, 'QueryStatus', 'i',
                               (pid,))

    def RegisterGame(self, pid):
        return new_method_call(self, 'RegisterGame', 'i',
                               (pid,))

    def UnregisterGame(self, pid):
        return new_method_call(self, 'UnregisterGame', 'i',
                               (pid,))

    def QueryStatusByPid(self, target, requester):
        return new_method_call(self, 'QueryStatusByPid', 'ii',
                               (target, requester))

    def RegisterGameByPid(self, target, requester):
        return new_method_call(self, 'RegisterGameByPid', 'ii',
                               (target, requester))

    def UnregisterGameByPid(self, target, requester):
        return new_method_call(self, 'UnregisterGameByPid', 'ii',
                               (target, requester))

    def QueryStatusByPIDFd(self, target, requester):
        return new_method_call(self, 'QueryStatusByPIDFd', 'hh',
                               (target, requester))

    def RegisterGameByPIDFd(self, target, requester):
        return new_method_call(self, 'RegisterGameByPIDFd', 'hh',
                               (target, requester))

    def UnregisterGameByPIDFd(self, target, requester):
        return new_method_call(self, 'UnregisterGameByPIDFd', 'hh',
                               (target, requester))

class RemoteDesktop(MessageGenerator):
    interface = 'org.freedesktop.portal.RemoteDesktop'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def CreateSession(self, options):
        return new_method_call(self, 'CreateSession', 'a{sv}',
                               (options,))

    def SelectDevices(self, session_handle, options):
        return new_method_call(self, 'SelectDevices', 'oa{sv}',
                               (session_handle, options))

    def Start(self, session_handle, parent_window, options):
        return new_method_call(self, 'Start', 'osa{sv}',
                               (session_handle, parent_window, options))

    def NotifyPointerMotion(self, session_handle, options, dx, dy):
        return new_method_call(self, 'NotifyPointerMotion', 'oa{sv}dd',
                               (session_handle, options, dx, dy))

    def NotifyPointerMotionAbsolute(self, session_handle, options, stream, x, y):
        return new_method_call(self, 'NotifyPointerMotionAbsolute', 'oa{sv}udd',
                               (session_handle, options, stream, x, y))

    def NotifyPointerButton(self, session_handle, options, button, state):
        return new_method_call(self, 'NotifyPointerButton', 'oa{sv}iu',
                               (session_handle, options, button, state))

    def NotifyPointerAxis(self, session_handle, options, dx, dy):
        return new_method_call(self, 'NotifyPointerAxis', 'oa{sv}dd',
                               (session_handle, options, dx, dy))

    def NotifyPointerAxisDiscrete(self, session_handle, options, axis, steps):
        return new_method_call(self, 'NotifyPointerAxisDiscrete', 'oa{sv}ui',
                               (session_handle, options, axis, steps))

    def NotifyKeyboardKeycode(self, session_handle, options, keycode, state):
        return new_method_call(self, 'NotifyKeyboardKeycode', 'oa{sv}iu',
                               (session_handle, options, keycode, state))

    def NotifyKeyboardKeysym(self, session_handle, options, keysym, state):
        return new_method_call(self, 'NotifyKeyboardKeysym', 'oa{sv}iu',
                               (session_handle, options, keysym, state))

    def NotifyTouchDown(self, session_handle, options, stream, slot, x, y):
        return new_method_call(self, 'NotifyTouchDown', 'oa{sv}uudd',
                               (session_handle, options, stream, slot, x, y))

    def NotifyTouchMotion(self, session_handle, options, stream, slot, x, y):
        return new_method_call(self, 'NotifyTouchMotion', 'oa{sv}uudd',
                               (session_handle, options, stream, slot, x, y))

    def NotifyTouchUp(self, session_handle, options, slot):
        return new_method_call(self, 'NotifyTouchUp', 'oa{sv}u',
                               (session_handle, options, slot))

class MemoryMonitor(MessageGenerator):
    interface = 'org.freedesktop.portal.MemoryMonitor'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

class OpenURI(MessageGenerator):
    interface = 'org.freedesktop.portal.OpenURI'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def OpenURI(self, parent_window, uri, options):
        return new_method_call(self, 'OpenURI', 'ssa{sv}',
                               (parent_window, uri, options))

    def OpenFile(self, parent_window, fd, options):
        return new_method_call(self, 'OpenFile', 'sha{sv}',
                               (parent_window, fd, options))

    def OpenDirectory(self, parent_window, fd, options):
        return new_method_call(self, 'OpenDirectory', 'sha{sv}',
                               (parent_window, fd, options))

class Realtime(MessageGenerator):
    interface = 'org.freedesktop.portal.Realtime'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def MakeThreadRealtimeWithPID(self, process, thread, priority):
        return new_method_call(self, 'MakeThreadRealtimeWithPID', 'ttu',
                               (process, thread, priority))

    def MakeThreadHighPriorityWithPID(self, process, thread, priority):
        return new_method_call(self, 'MakeThreadHighPriorityWithPID', 'tti',
                               (process, thread, priority))

class DynamicLauncher(MessageGenerator):
    interface = 'org.freedesktop.portal.DynamicLauncher'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def Install(self, token, desktop_file_id, desktop_entry, options):
        return new_method_call(self, 'Install', 'sssa{sv}',
                               (token, desktop_file_id, desktop_entry, options))

    def PrepareInstall(self, parent_window, name, icon_v, options):
        return new_method_call(self, 'PrepareInstall', 'ssva{sv}',
                               (parent_window, name, icon_v, options))

    def RequestInstallToken(self, name, icon_v, options):
        return new_method_call(self, 'RequestInstallToken', 'sva{sv}',
                               (name, icon_v, options))

    def Uninstall(self, desktop_file_id, options):
        return new_method_call(self, 'Uninstall', 'sa{sv}',
                               (desktop_file_id, options))

    def GetDesktopEntry(self, desktop_file_id):
        return new_method_call(self, 'GetDesktopEntry', 's',
                               (desktop_file_id,))

    def GetIcon(self, desktop_file_id):
        return new_method_call(self, 'GetIcon', 's',
                               (desktop_file_id,))

    def Launch(self, desktop_file_id, options):
        return new_method_call(self, 'Launch', 'sa{sv}',
                               (desktop_file_id, options))

class Wallpaper(MessageGenerator):
    interface = 'org.freedesktop.portal.Wallpaper'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def SetWallpaperURI(self, parent_window, uri, options):
        return new_method_call(self, 'SetWallpaperURI', 'ssa{sv}',
                               (parent_window, uri, options))

    def SetWallpaperFile(self, parent_window, fd, options):
        return new_method_call(self, 'SetWallpaperFile', 'sha{sv}',
                               (parent_window, fd, options))

class Camera(MessageGenerator):
    interface = 'org.freedesktop.portal.Camera'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def AccessCamera(self, options):
        return new_method_call(self, 'AccessCamera', 'a{sv}',
                               (options,))

    def OpenPipeWireRemote(self, options):
        return new_method_call(self, 'OpenPipeWireRemote', 'a{sv}',
                               (options,))

class Device(MessageGenerator):
    interface = 'org.freedesktop.portal.Device'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def AccessDevice(self, pid, devices, options):
        return new_method_call(self, 'AccessDevice', 'uasa{sv}',
                               (pid, devices, options))

class PowerProfileMonitor(MessageGenerator):
    interface = 'org.freedesktop.portal.PowerProfileMonitor'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

class ScreenCast(MessageGenerator):
    interface = 'org.freedesktop.portal.ScreenCast'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def CreateSession(self, options):
        return new_method_call(self, 'CreateSession', 'a{sv}',
                               (options,))

    def SelectSources(self, session_handle, options):
        return new_method_call(self, 'SelectSources', 'oa{sv}',
                               (session_handle, options))

    def Start(self, session_handle, parent_window, options):
        return new_method_call(self, 'Start', 'osa{sv}',
                               (session_handle, parent_window, options))

    def OpenPipeWireRemote(self, session_handle, options):
        return new_method_call(self, 'OpenPipeWireRemote', 'oa{sv}',
                               (session_handle, options))

class Email(MessageGenerator):
    interface = 'org.freedesktop.portal.Email'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def ComposeEmail(self, parent_window, options):
        return new_method_call(self, 'ComposeEmail', 'sa{sv}',
                               (parent_window, options))

class Trash(MessageGenerator):
    interface = 'org.freedesktop.portal.Trash'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def TrashFile(self, fd):
        return new_method_call(self, 'TrashFile', 'h',
                               (fd,))

class ProxyResolver(MessageGenerator):
    interface = 'org.freedesktop.portal.ProxyResolver'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def Lookup(self, uri):
        return new_method_call(self, 'Lookup', 's',
                               (uri,))

class FileChooser(MessageGenerator):
    interface = 'org.freedesktop.portal.FileChooser'

    def __init__(self, object_path='/org/freedesktop/portal/desktop',
                 bus_name='org.freedesktop.portal.Desktop'):
        super().__init__(object_path=object_path, bus_name=bus_name)

    def OpenFile(self, parent_window, title, options):
        return new_method_call(self, 'OpenFile', 'ssa{sv}',
                               (parent_window, title, options))

    def SaveFile(self, parent_window, title, options):
        return new_method_call(self, 'SaveFile', 'ssa{sv}',
                               (parent_window, title, options))

    def SaveFiles(self, parent_window, title, options):
        return new_method_call(self, 'SaveFiles', 'ssa{sv}',
                               (parent_window, title, options))
